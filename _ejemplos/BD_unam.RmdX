---
title: "Visualización de especies comestibles y tóxicas registradas en GBIF (referencia UNAM)"
author: "Nohemy Cardona Claros"
output:
  html_document:
    toc: true
  pdf_document:
    toc: true
---

```{r setup, include=FALSE}
# Se establecen las opciones globales de los chunks para suprimir mensajes y avisos
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

## 1. Cargar librerías

```{r}
# Se cargan los paquetes requeridos para la lectura de datos, 
# manipulación, operaciones espaciales y visualización
library(readr)        # Se utilizará para leer ficheros CSV
library(dplyr)        # Se empleará para la transformación de datos y  tablas
library(sf)           # Se usará para manejar objetos espaciales
library(tmap)         # Se aplicará para generar mapas (estático o interactivo)
library(ggplot2)      # Se reservará para gráficos (no usado directamente aquí)
library(rgbif)        # Se utilizará para descargar registros de GBIF
library(knitr)        # Se usará para formatear tablas en el documento
library(sf)        # Se carga la librería 'sf' para manejo de datos espaciales.
library(tidyr)
library(stringr)     # Se usa para operaciones con cadenas de texto
# devtools::install_github("brendanf/FUNGuildR")
library(FUNGuildR) # asignación de guilds fúngicos
library(jsonlite)
library(DT)
library(htmltools)
```

## 2. Leer la capa de vegetación (CONABIO)

```{r}
# Cargar shapefile directamente desde la ruta  
veg <- st_read("889463842781_s/conjunto_de_datos/cdv_usuev250sVII_cnal.shp")    

# Se inspeccionan los nombres de columnas para conocer la variable de vegetación 
names(veg)  

# Se visualizan las primeras filas de interés: CLAVE, DESCRIPCIO y geometría 
veg %>%   
  select(CLAVE, DESCRIPCIO, geometry) %>%   
  head(10)  

# Se obtienen las categorías únicas de vegetación 
categorias_veg <- unique(veg$DESCRIPCIO) 
categorias_veg  

# Se filtra la capa para quedarnos solo con polígonos de bosques de pino y vegetación con pino 
veg_pino <- veg %>%
  filter(grepl("BOSQUE .*PINO", DESCRIPCIO, ignore.case = TRUE)) 
veg_pino  

unique(veg_pino$DESCRIPCIO) # Ver cuántos polígonos quedaron 

nrow(veg_pino) 
```

## 3. Lectura y depuración de la lista de especies con estado comestible y tóxico (UNAM)

```{r}
# Se lee el archivo CSV con la lista de especies y su categoría de consumo
unam <- read_csv("ListaUNAM.csv", locale = locale(encoding = "latin1"))

# Se armonizan los nombres para asegurar coincidencias exactas con GBIF
unam <- unam %>%
  mutate(Especies = trimws(Especies))         # Se recortan espacios en blanco

# Se muestran las primeras filas como vista preliminar
kable(head(unam), caption = "Lista de especies con categorías comestible y tóxica (UNAM)")

# Se imprime la cantidad total de registros leídos
nrow(unam)                                    # Se verifica que existan 543 especies

# Se carga el paquete DT para tablas interactivas
library(DT)

# Se colapsa cada entrada (por si algún campo es vector) y se fuerza a carácter plano
for (i in 1:length(unam$Especies)) {
  unam$Especies[i] <- paste(unam$Especies[[i]], collapse = ",")
}
unam$Especies <- unlist(unam$Especies)        # Se desanida la lista a vector simple

# Se presenta la tabla interactiva filtrada a columnas clave
unam %>%
  select("Especies", "Comestible", "Tóxico") %>%
  datatable()
```

## 4. Descargar registros de bases de datos

## 4.1. GBIF (Reino Fungi en México)

```{r}
# Se obtiene la clave taxonómica para el reino Fungi desde GBIF
fungi_key <- name_backbone(name = "Fungi")$kingdomKey

# Se descargan los registros con coordenadas dentro de México (límite 5000)
gbif_data <- occ_search(
  kingdomKey   = fungi_key,
  country      = "MX",
  hasCoordinate = TRUE,
  limit        = 5000          # Se define límite de descarga
)$data

# Se visualiza la tabla cruda de GBIF para inspección
#View(gbif_data)

# Se convierte la columna species en texto plano (por si llega como lista)
library(DT)
for (i in 1:length(gbif_data$species)) {
  gbif_data$species[i] <- paste(gbif_data$species[[i]], collapse = ",")
}
gbif_data$species <- unlist(gbif_data$species)

# Se presenta tabla interactiva de campos seleccionados
gbif_data %>%
  select("scientificName", "species", "iucnRedListCategory") %>%
  datatable()

# Se imprime el número total de ocurrencias descargadas
nrow(gbif_data)
```

## 4.1.1. Agregar columnas de comestibilidad y toxicidad de UNAM a GBIF

```{r}
# Se vinculan los registros GBIF con la lista UNAM vía nombre de especie
gbif_data1 <- gbif_data %>%
  left_join(unam, by = c("species" = "Especies"))

# Se visualiza la tabla resultante para verificar coincidencias
View(gbif_data1)

# Se muestran tablas de frecuencia para las columnas “Comestible” y “Tóxico”
table(gbif_data1$Comestible, useNA = "always")
table(gbif_data1$Tóxico,     useNA = "always")

# Se crea una columna resumen que prioriza “Comestible” sobre “Tóxico”
gbif_data2 <- gbif_data1 %>%
  mutate(Estado = case_when(
    Comestible == "Comestible" ~ "Comestible",
    Tóxico     == "Tóxico"     ~ "Tóxico",
    TRUE                       ~ "No clasificado"
  ))

# Se comprueba la dimensión de la nueva tabla
nrow(gbif_data2)                           # Se observa que hay 5000 registros

# Se muestra tabla interactiva con columnas seleccionadas
gbif_data2 %>%
  select("scientificName", "species", "iucnRedListCategory",
         "Comestible", "Tóxico") %>%
  datatable()
View(gbif_data2)
```

## 4.1.2. GBIF por tipo de vegetación y por pinares

```{r}
# Comenzar con el data frame original (no sf), que sí tiene lon/lat
df <- gbif_data %>% 
  select(species, decimalLongitude, decimalLatitude)

# Eliminar NAs de lon/lat
df <- df %>% filter(!is.na(decimalLongitude), !is.na(decimalLatitude))

# Convertir a sf con WGS84
gbif_sf1 <- st_as_sf(df, 
                     coords = c("decimalLongitude","decimalLatitude"), 
                     crs = 4326)

# Reproyectar a CRS de vegetación
gbif_proj <- st_transform(gbif_sf1, st_crs(veg))

# join
occ_veg <- st_join(
  gbif_proj,
  veg,
  join = st_intersects,
  left = FALSE
)
occ_veg

# Comprobar CRS
st_crs(gbif_proj)   # EPSG:9001


# Tabla de todos los registros por tipo de vegetación
tabla_general <- occ_veg %>%
  group_by(DESCRIPCIO) %>%                       # Se agruparon los registros por categoría
  summarise(
    total_registros = n(),                       # Se contó el número total de ocurrencias
    total_especies  = n_distinct(species),       # Se contó el número de especies únicas
    .groups = "drop"                             # Se suprimió la agrupación residual
  ) %>%
  arrange(desc(total_registros))                 # Se ordenó de mayor a menor registros

# Tabla de registros solo en bosques de pino
tabla_pinares <- occ_pino %>%
  group_by(DESCRIPCIO) %>%                       # Se agruparon los registros dentro de pinares
  summarise(
    pino_registros = n(),                        # Se contó el número de ocurrencias en pinar
    pino_especies  = n_distinct(species),        # Se contó el número de especies únicas en pinar
    .groups = "drop"
  ) %>%
  arrange(desc(pino_registros))                  # Se ordenó de mayor a menor registros en pino

# Visualización de las tablas resultantes
print(tabla_general)
print(tabla_pinares)
View(tabla_general)
View(tabla_pinares)
```

## 4.1.3. GBIF por tipo de vegetación y por pinares / ectomicorrízicos y comestibles

```{r}
# Análisis combinado de hongos en categorías: ectomicorrízicos, comestibles y ambos

# FUNGuildR instalado desde GitHub si no estaba presente
if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")
remotes::install_github("brendanf/FUNGuildR")

# Leer el JSON local de FUNGuild (ruta de ejemplo, ajústala)
ruta_json <- "C:/Users/cncar/Desktop/EEMMs/FUNGuild_db_1.1.json"
funguild_db <- fromJSON(ruta_json) %>% 
  as_tibble()    # Se parsearon los datos a un tibble

# Verifica la estructura para saber qué campos usar
#    Aquí asumimos que contiene al menos columnas 'Taxonomy', 'Guild', 'ConfidenceRanking'.
glimpse(funguild_db)

#Filtrar la base de FUNGuild para quedarnos solo con las especies presentes en occ_veg
guild_all <- funguild_db %>%
  filter(taxon %in% occ_veg$species)
#View(guild_all)

# Filtrar las especies ectomicorrízicas de confianza
ecto_species <- guild_all %>%
  filter(
    guild             == "Ectomycorrhizal", # Se filtran los ectomicorrízicos
    confidenceRanking %in% c("Possible", "Probable", "Highly Probable")
  ) %>%
  pull(taxon) # Se extrae vector de nombres
#View(ecto_species)

# Comprobar resultados
length(ecto_species)       # Cuántas especies
head(ecto_species)         # Primeras especies

# Filtrar occ_veg y occ_pino
occ_veg_ecto <- occ_veg %>% filter(species %in% ecto_species)
occ_pino_ecto <- occ_pino %>% filter(species %in% ecto_species)
#View(occ_veg_ecto)
#View(pino_ecto)

# Para las especies ectomicorrízicas en todo México
especies_ecto <- unique(occ_veg_ecto$species)
print(especies_ecto)

# Para las especies ectomicorrízicas solo en pinares
especies_ecto_pino <- unique(occ_pino_ecto$species)
print(especies_ecto_pino)

# Generar tablas ectomicorrízicos
tabla_general_ectom <- occ_veg_ecto %>%
  group_by(DESCRIPCIO) %>%
  summarise(
    registros_ecto = n(),
    especies_ecto  = n_distinct(species),
    .groups = "drop"
  )

tabla_pinares_ectom <- occ_pino_ecto %>%
  group_by(DESCRIPCIO) %>%
  summarise(
    pino_registros_ecto = n(),
    pino_especies_ecto  = n_distinct(species),
    .groups = "drop"
  )

#View(tabla_general_ectom)
#View(tabla_pinares_ectom)

###############################
# Especies comestibles
# Filtrar registros comestibles en todas las vegetaciones
occ_veg_com  <- occ_veg %>% 
  filter(species %in% unam$Especies)
#View(occ_veg_com)

# Filtrar registros comestibles solo en pinares
occ_pino_com <- occ_pino %>% 
  filter(species %in% unam$Especies)
#View(occ_pino_com)

# Para las especies comestibles en todo México
especies_com <- unique(occ_veg_com$species)
print(especies_com)

# Para las especies comestibles solo en pinares
especies_com_pino <- unique(occ_pino_com$species)
print(especies_com_pino)

# Visualización interactiva con DT
mostrar_tabla <- function(especies, titulo) {
  datatable(
    data.frame(Especie = sort(unique(especies))),
    caption = htmltools::tags$caption(
      style = 'caption-side: top; text-align: left; font-weight: bold;',
      titulo
    ),
    options = list(pageLength = 10, autoWidth = TRUE)
  )
}

# Generar tablas comestibles
tabla_general_com <- occ_veg_com %>%
  group_by(DESCRIPCIO) %>%
  summarise(
    registros_com = n(),
    especies_com  = n_distinct(species),
    .groups = "drop"
  )

tabla_pinares_com <- occ_pino_com %>%
  group_by(DESCRIPCIO) %>%
  summarise(
    pino_registros_com = n(),
    pino_especies_com  = n_distinct(species),
    .groups = "drop"
  )

#View(tabla_general_com)
#View(tabla_pinares_com)

#############################
# Hongos Comestibles + Ectomicorrízicos
# Filtrar registros que son simultáneamente comestibles y ectomicorrízicos
# En todas las categorías de vegetación (todo México)
occ_veg_com_ecto <- occ_veg %>%
  filter(species %in% unam$Especies,      # Se mantienen solo los comestibles
         species %in% ecto_species)       # Se mantienen solo los ectomicorrízicos
#View(occ_veg_com_ecto)

# Solo en pinares
occ_pino_com_ecto <- occ_pino %>%
  filter(species %in% unam$Especies,
         species %in% ecto_species)
#View(occ_pino_com_ecto)

# Listar especies en consola 
cat("Ectomicorrízicas + Comestibles (todas las vegetaciones):\n")
print(sort(unique(occ_veg_com_ecto$species)))

cat("\nComestibles + Ectomicorrízicas (todas las vegetaciones):\n")
print(sort(unique(occ_veg_com_ecto$species)))  # es la misma lista que arriba

cat("\nComestibles + Ectomicorrízicas (solo pinares):\n")
print(sort(unique(occ_pino_com_ecto$species)))

#Visualizar con tabla interactiva ---
mostrar_tabla <- function(especies, titulo) {
  datatable(
    data.frame(Especie = sort(unique(especies))),
    caption = tags$caption(
      style = 'caption-side: top; text-align: left; font-weight: bold;',
      titulo
    ),
    options = list(pageLength = 10, autoWidth = TRUE)
  )
}

# Tabla para México (ectomycorrízicas + comestibles)
mostrar_tabla(
  occ_veg_com_ecto$species,
  "Ectomicorrízicas + Comestibles (todas las vegetaciones)"
)

# Tabla para México (comestibles + ectomicorrízicas) — idéntica
mostrar_tabla(
  occ_veg_com_ecto$species,
  "Comestibles + Ectomicorrízicas (todas las vegetaciones)"
)

# Tabla para pinares
mostrar_tabla(
  occ_pino_com_ecto$species,
  "Comestibles + Ectomicorrízicas (solo pinares)"
)

mostrar_tabla(
  occ_pino_com_ecto$species,
  "Comestibles + Ectomicorrízicas (solo pinares)"
)
```

## 4.1.4. Visualizaciones y reportes para GBIF

```{r maps-and-charts, echo=FALSE, warning=FALSE, message=FALSE}
# --- 5.1 Preparación de datos para mapas y gráficos ------------------------

# (a) Asegurar que occ_veg, occ_pino, occ_veg_com, occ_pino_com, occ_veg_ecto, occ_pino_ecto, occ_veg_com_ecto y occ_pino_com_ecto ya existen

# (b) Cargar librerías de visualización
library(tmap)       # Mapas estáticos e interactivos
library(leaflet)    # Mapas web
library(ggplot2)    # Gráficos vectoriales
library(RColorBrewer)

# --- 5.2 Mapa estático de riqueza de especies por vegetación (occ_veg) -----
tmap_mode("plot")
map_richness <- tm_shape(veg) +
  tm_polygons(col = "DESCRIPCIO",
              palette = "Greys",
              border.alpha = 0.2) +
  tm_shape(occ_veg) +
  tm_dots(size = 0.02, col = "species", palette = "Set3", 
          title = "Especies") +
  tm_facets(by = "DESCRIPCIO", ncol = 4, free.coords = TRUE) +
  tm_layout(
    title = "Distribución de registros GBIF por tipo de vegetación",
    legend.outside = TRUE,
    frame = FALSE,
    inner.margins = c(0.05,0.05,0.05,0.2)
  )
print(map_richness)

# --- 5.3 Mapa interactivo de registros comestibles + ectomicorrízicos ------
leaflet(options = leafletOptions(minZoom = 4, maxZoom = 12)) %>%
  addProviderTiles(providers$CartoDB.Positron) %>%
  addPolygons(data = veg_pino, color = "#006400", weight = 1, fillOpacity = 0.1,
              group = "Bosques de pino") %>%
  addCircleMarkers(data = occ_veg_com_ecto,
                   lng = ~st_coordinates(.)[,1], lat = ~st_coordinates(.)[,2],
                   radius = 4, fillOpacity = 0.8, color = "#D35400",
                   stroke = FALSE,
                   popup = ~paste0("<b>", species, "</b><br/>Categoría: Com+Ecto")) %>%
  addLegend("bottomright", colors = "#D35400", labels = "Comestibles + Ectom.", title="Puntos") 

# --- 5.4 Gráficos de barras de RIQUEZA y FRECUENCIA ------------------------

# (a) Top 10 especies comestibles + ectom.
top10_com_ecto <- occ_veg_com_ecto %>%
  count(species, sort = TRUE) %>% slice_max(n, n = 10) %>%
  mutate(species = reorder(species, n))

ggplot(top10_com_ecto, aes(x = species, y = n)) +
  geom_col(fill = "#1B4F72", width = 0.7) +
  geom_text(aes(label = n), hjust = -0.1, size = 3) +
  coord_flip() +
  labs(
    title = "Top 10 especies comestibles + ectomicorrízicas",
    subtitle = "Registros en todo México",
    x = NULL, y = "Número de registros"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title    = element_text(face="bold", size=14),
    plot.subtitle = element_text(size=11),
    axis.text     = element_text(color="black")
  )

# (b) Riqueza de especies por tipo de vegetación (comestibles)
rich_com <- occ_veg_com %>%
  group_by(DESCRIPCIO) %>%
  summarise(especies = n_distinct(species)) %>%
  arrange(especies) %>%
  mutate(DESCRIPCIO = factor(DESCRIPCIO, levels = DESCRIPCIO))

ggplot(rich_com, aes(x = especies, y = DESCRIPCIO)) +
  geom_col(fill = "#117A65") +
  labs(
    title = "Riqueza de hongos comestibles por tipo de vegetación",
    x = "Especies únicas", y = NULL
  ) +
  theme_minimal(base_size = 11)
```

## 
